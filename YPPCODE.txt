Found it

protected Hole getNextHole(boolean var1) {
___++this._holesGenerated;
___if (!var1) {
______return new Hole(this._holesGenerated);
___} else {
______boolean[][] var4;
______if (this._difficulty == 0) {
_________(var4 = new boolean[8][4])[0][0] = var4[0][1] = var4[0][3] = var4[1][0] = var4[1][1] = var4[1][2] = var4[1][3] = var4[2][0] _________= var4[2][3] = var4[3][2] = var4[3][3] = var4[4][2] = var4[5][2] = var4[6][2] = var4[7][2] = true;
_________return new Hole(var4);
______} else if (this._difficulty == 1) {
_________(var4 = new boolean[5][5])[0][0] = var4[1][0] = var4[1][1] = var4[1][4] = var4[2][0] = var4[2][3] = var4[2][4] = var4[3][0] _________= var4[3][3] = var4[3][4] = var4[4][0] = var4[4][1] = var4[4][2] = var4[4][3] = var4[4][4] = true;
_________return new Hole(var4);
______} else {
_________int var3 = Math.max(4, 6 - this._difficulty);
_________int var2 = Math.min(14, 6 + this._difficulty);
_________var3 += this._rando.nextInt(var2 - var3 + 1);
_________return new Hole(var3, this.getRandom(), this._holesGenerated);
______}
___}
}

---------------------------------------------------
P.S. If there is a better way to post code please let me know

So it looks like past level 1 and 2 (which are hard coded boards) the hole creation seems to be the last few lines.
-----------------------------------------------------

_________int var3 = Math.max(4, 6 - this._difficulty);
_________int var2 = Math.min(14, 6 + this._difficulty);
_________var3 += this._rando.nextInt(var2 - var3 + 1);
_________return new Hole(var3, this.getRandom(), this._holesGenerated);


----------------------------------------------------------
Hole function
----------------------------------------------------------

public Hole(int size, Random Randint, int holeID) { // hole(4+ rand(4/10+1),randint?,holes genned)
___this._size = size;
___this._origHoleSquares = size * 5;
___this._holeId = holeID;
___this._height = MIN_ROWS[size];
___if ((size = MAX_ROWS[size] - this._height) != 0) {
______this._height += Randint.nextInt(size + 1);
______}

___do {
______this._width = 4 + this._origHoleSquares / this._height - Randint.nextInt(2);
______if (this._width > 10) {
_________++this._height;
_________}
______} while(this._width > 10);

___if (this._height > 10) {
______this._width = 10;
______this._height = 10;
______}

______this._origEmpty = new boolean[this._width][this._height];
______this._empty = new boolean[this._width][this._height];

______for(size = 0; size < this._height; ++size) {
_________for(holeID = 2; holeID < this._width - 2; ++holeID) {
____________this._origEmpty[holeID][size] = true;
____________}
_________}

___this.knockOut(this._origHoleSquares - this._height * (this._width - 4), Randint, false);
___this.recreateEmpty();
}